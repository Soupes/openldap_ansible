---
- name: Check if OpenLDAP is already installed
  stat:
    path: /usr/sbin/slapd
  register: slapd_installed

- name: Check current slapd configuration
  shell: |
    slapcat -n 0 | grep -E "(olcRootDN|olcSuffix)" || echo "not configured"
  register: slapd_config
  changed_when: false
  ignore_errors: yes
  when: slapd_installed.stat.exists

- name: Set debconf values using shell (only if not configured)
  shell: |
    echo "slapd slapd/password1 password {{ ldap_admin_password }}" | debconf-set-selections
    echo "slapd slapd/password2 password {{ ldap_admin_password }}" | debconf-set-selections
    echo "slapd slapd/domain string {{ ldap_domain }}" | debconf-set-selections
    echo "slapd slapd/organization string {{ ldap_organization }}" | debconf-set-selections
  when: not slapd_installed.stat.exists or "not configured" in slapd_config.stdout

- name: Install OpenLDAP server and utilities
  apt:
    name:
      - slapd
      - ldap-utils
      - ldapscripts
      - python3-ldap
    state: present
    install_recommends: no
  when: not slapd_installed.stat.exists

- name: Reconfigure slapd non-interactively (only if not configured)
  command: dpkg-reconfigure -f noninteractive slapd
  become: yes
  when: not slapd_installed.stat.exists or "not configured" in slapd_config.stdout

- name: Pause for slapd to initialize
  pause:
    seconds: 10
  when: not slapd_installed.stat.exists or "not configured" in slapd_config.stdout

- name: Check if organizational unit for people exists
  command: |
    ldapsearch -x -b "ou=people,{{ ldap_base_dn }}" -D "cn=admin,{{ ldap_base_dn }}" -w "{{ ldap_admin_password }}" -LLL "(ou=people)" dn 2>/dev/null | grep -q "dn:"
  register: people_ou_exists
  changed_when: false
  ignore_errors: yes

- name: Create organizational unit for people
  community.general.ldap_entry:
    dn: "ou=people,{{ ldap_base_dn }}"
    objectClass: organizationalUnit
    attributes:
      ou: people
    state: present
    bind_dn: "cn=admin,{{ ldap_base_dn }}"
    bind_pw: "{{ ldap_admin_password }}"
    server_uri: "ldap://localhost"
  when: people_ou_exists.rc != 0

- name: Check if organizational unit for groups exists
  command: |
    ldapsearch -x -b "ou=groups,{{ ldap_base_dn }}" -D "cn=admin,{{ ldap_base_dn }}" -w "{{ ldap_admin_password }}" -LLL "(ou=groups)" dn 2>/dev/null | grep -q "dn:"
  register: groups_ou_exists
  changed_when: false
  ignore_errors: yes

- name: Create organizational unit for groups
  community.general.ldap_entry:
    dn: "ou=groups,{{ ldap_base_dn }}"
    objectClass: organizationalUnit
    attributes:
      ou: groups
    state: present
    bind_dn: "cn=admin,{{ ldap_base_dn }}"
    bind_pw: "{{ ldap_admin_password }}"
    server_uri: "ldap://localhost"
  when: groups_ou_exists.rc != 0

- name: Check if users already exist
  command: |
    ldapsearch -x -b "ou=people,{{ ldap_base_dn }}" -D "cn=admin,{{ ldap_base_dn }}" -w "{{ ldap_admin_password }}" -LLL "(objectClass=inetOrgPerson)" uid 2>/dev/null
  register: existing_users
  changed_when: false
  ignore_errors: yes

- name: Add users to LDAP (without passwords first)
  community.general.ldap_entry:
    dn: "uid={{ item.name }},ou=people,{{ ldap_base_dn }}"
    objectClass:
      - inetOrgPerson
      - posixAccount
      - shadowAccount
    attributes:
      cn: "{{ item.name }}"
      sn: "{{ item.surname }}"
      uid: "{{ item.name }}"
      uidNumber: "{{ item.uid }}"
      gidNumber: "100"
      homeDirectory: "/home/{{ item.name }}"
      loginShell: "/bin/bash"
    state: present
    bind_dn: "cn=admin,{{ ldap_base_dn }}"
    bind_pw: "{{ ldap_admin_password }}"
    server_uri: "ldap://localhost"
  loop: "{{ ldap_users }}"
  loop_control:
    label: "{{ item.name }}"
  when: existing_users.rc != 0 or item.name not in existing_users.stdout

- name: Check current user passwords
  command: |
    ldapsearch -x -b "uid={{ item.name }},ou=people,{{ ldap_base_dn }}" -D "cn=admin,{{ ldap_base_dn }}" -w "{{ ldap_admin_password }}" -LLL userPassword 2>/dev/null
  register: user_password_check
  changed_when: false
  ignore_errors: yes
  loop: "{{ ldap_users }}"
  loop_control:
    label: "{{ item.name }}"

- name: Set passwords for users using ldappasswd (only if not set)
  command: |
    ldappasswd -x -D "cn=admin,{{ ldap_base_dn }}" -w "{{ ldap_admin_password }}" \
    -s "{{ item.password }}" "uid={{ item.item.name }},ou=people,{{ ldap_base_dn }}"
  loop: "{{ user_password_check.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when: item.rc != 0 or "userPassword" not in item.stdout

- name: Check if groups already exist
  command: |
    ldapsearch -x -b "ou=groups,{{ ldap_base_dn }}" -D "cn=admin,{{ ldap_base_dn }}" -w "{{ ldap_admin_password }}" -LLL "(objectClass=posixGroup)" cn 2>/dev/null
  register: existing_groups
  changed_when: false
  ignore_errors: yes

- name: Add groups to LDAP
  community.general.ldap_entry:
    dn: "cn={{ item.name }},ou=groups,{{ ldap_base_dn }}"
    objectClass:
      - posixGroup
    attributes:
      cn: "{{ item.name }}"
      gidNumber: "{{ item.gid }}"
    state: present
    bind_dn: "cn=admin,{{ ldap_base_dn }}"
    bind_pw: "{{ ldap_admin_password }}"
    server_uri: "ldap://localhost"
  loop: "{{ ldap_groups }}"
  loop_control:
    label: "{{ item.name }}"
  when: existing_groups.rc != 0 or item.name not in existing_groups.stdout

- name: Ensure slapd service is running and enabled
  systemd:
    name: slapd
    state: started
    enabled: yes

- name: Final success message
  debug:
    msg: |
      OpenLDAP configuration completed!
      =================================
      Admin DN: cn=admin,{{ ldap_base_dn }}
      Base DN: {{ ldap_base_dn }}
      
      Users: {{ ldap_users | map(attribute='name') | join(', ') }}
      Groups: {{ ldap_groups | map(attribute='name') | join(', ') }}
      
      Status: Service is running and accessible
